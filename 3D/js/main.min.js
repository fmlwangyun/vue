var container, stats;
var camera, scene, renderer;
var windowHalfX = window.innerWidth / 2;
var windowHalfY = window.innerHeight / 2;
var sceneRoot;
var bgWidth = 1;
var bgHeight = 1;
var defaultYearHeight;
var yearHeight = 1;
var pages = new Array;
var curPage = 0;
var isAutoRolling = false;
var rollingVelocity = 0;
var touchVel = 0;
var raycaster = new THREE.Raycaster;
var shatters = [];
var stone1, stone2, stone3, line;
var isTraveling = false;
var travelPos = {x: 0, y: 0};
var maxSceneRootY = 0;
var img_v = "?v=120401";
var stonesOccupied = [];
var stonesAvailable = [];
var PI = 3.1415926;
var PI2 = 2 * PI;
var meshes = {};
var dogMeshes = [];
var mixers = [];
var wujian1Tex;
var wujian3Tex;
var huoxinTex;
var loadingCount = 0;
var loadingAmount = 0;
var enableMovePage = false;
var isSceneStarted = false;
var multilingual = false;
var isEnglish = false;
init();
animate();
function init() {
    bgWidth = window.innerWidth;
    bgHeight = window.innerHeight;
    defaultYearHeight = window.innerHeight * .5;
    camera2 = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, -1e4, 1e4);
    camera2.position.z = 1e3;
    camera = new THREE.PerspectiveCamera(2 * THREE.Math.radToDeg(Math.atan(bgHeight / 2e3)), window.innerWidth / window.innerHeight, 1, 2e3);
    camera.position.z = 1e3;
    scene = new THREE.Scene;
    scene2 = new THREE.Scene;
    sceneRoot2 = new THREE.Group;
    scene2.add(sceneRoot2);
    var ambientLight = new THREE.AmbientLight(10066329, 1);
    scene.add(ambientLight);
    light = new THREE.DirectionalLight(15658734, 1);
    light.position.set(-1, 1, 2);
    light.setRotationFromEuler(new THREE.Euler(0, 0, 0, "XYZ"));
    scene.add(light);
    sceneRoot = new THREE.Group;
    scene.add(sceneRoot);
    renderer = new THREE.WebGLRenderer;
    renderer.setPixelRatio(window.devicePixelRatio);
    onWindowResize();
    $(renderer.domElement).appendTo("#container");
    document.addEventListener("mousemove", onDocumentMouseMove, false);
    window.addEventListener("resize", onWindowResize, false);
    document.addEventListener("touchstart", onTouchStart, false);
    document.addEventListener("touchmove", onTouchMove, false);
    document.addEventListener("touchend", onTouchEnd, false);
    window.addEventListener("resize", onWindowResize, false);
    wujian1Tex = loadTexture("page_res/page1/wujian1.png" + img_v);
    huoxinTex = loadTexture("page_res/page4/huoxin.png" + img_v);
    wujian3Tex = loadTexture("page_res/page6/wujian3.png" + img_v);
    var pageYearHeights = {
        0: 0,
        1: window.innerHeight * .8,
        2: window.innerHeight * .5,
        3: window.innerHeight * .5,
        4: window.innerHeight * .5,
        5: window.innerHeight * 1,
        6: window.innerHeight * .5,
        7: window.innerHeight * .5,
        8: window.innerHeight * .5,
        9: window.innerHeight * .5
    };
    loadStones(function () {
        maxSceneRootY = 0;
        for (var i = 0; i <= 9; i++) {
            addPage("img/scene/bg_" + i + ".png" + img_v, pageYearHeights[i]);
            if (i != 0) {
                maxSceneRootY = maxSceneRootY + (bgHeight + pages[i].yearHeight)
            }
        }
    });
    curPage = 0
}
function jumpToPage(pageIdx) {
    curPage = pageIdx - 1;
    setSceneRootY(-pages[pageIdx].posY);
    switchToPage(pageIdx)
}
var loadStonesCount = 0;
function loadStones(finishCallback) {
    var matColor = 16777215;
    var matEmissive = 5592405;
    var matSpecular = 16777215;
    var matShininess = 30;
    var matOpacity = .8;
    loadObj("page_res/stone/suipian1.obj", "page_res/stone/sekuai.jpg" + img_v, function (object, mesh) {
        var scale = 200;
        object.scale.set(scale, scale, scale);
        object.position.set(0, 0, 0);
        mesh.material.depthTest = false;
        mesh.material.depthWrite = false;
        mesh.renderOrder = 2;
        mesh.visible = true;
        var mat = new THREE.MeshPhongMaterial({
            opacity: matOpacity,
            color: matColor,
            emissive: matEmissive,
            specular: matSpecular,
            shininess: matShininess,
            map: mesh.material.map,
            transparent: true
        });
        mesh.material = mat;
        stone1 = object;
        loadStonesCount++;
        if (loadStonesCount >= 4) finishCallback()
    });
    loadObj("page_res/stone/suipian2.obj", "page_res/stone/sekuai.jpg" + img_v, function (object, mesh) {
        var scale = 200;
        object.scale.set(scale, scale, scale);
        object.position.set(0, 0, 0);
        mesh.material.depthTest = false;
        mesh.material.depthWrite = false;
        mesh.renderOrder = 2;
        mesh.visible = true;
        var mat = new THREE.MeshPhongMaterial({
            opacity: matOpacity,
            color: matColor,
            emissive: matEmissive,
            specular: matSpecular,
            shininess: matShininess,
            map: mesh.material.map,
            transparent: true
        });
        mesh.material = mat;
        stone2 = object;
        loadStonesCount++;
        if (loadStonesCount >= 4) finishCallback()
    });
    loadObj("page_res/stone/suipian3.obj", "page_res/stone/sekuai.jpg" + img_v, function (object, mesh) {
        var scale = 200;
        object.scale.set(scale, scale, scale);
        object.position.set(0, 0, 0);
        mesh.material.depthTest = false;
        mesh.material.depthWrite = false;
        mesh.renderOrder = 2;
        mesh.visible = true;
        var mat = new THREE.MeshPhongMaterial({
            opacity: matOpacity,
            color: matColor,
            emissive: matEmissive,
            specular: matSpecular,
            shininess: matShininess,
            map: mesh.material.map,
            transparent: true
        });
        mesh.material = mat;
        stone3 = object;
        loadStonesCount++;
        if (loadStonesCount >= 4) finishCallback()
    });
    var color = new THREE.Color(1, 1, 1, 1);
    color.a = .4;
    loadObj("page_res/stone/xian.obj", color, function (object, mesh) {
        var scale = 200;
        object.scale.set(scale, scale, scale);
        object.position.set(0, 0, 0);
        mesh.material.depthTest = false;
        mesh.material.depthWrite = false;
        mesh.renderOrder = 2;
        mesh.visible = true;
        line = object;
        loadStonesCount++;
        if (loadStonesCount >= 4) finishCallback()
    })
}
function updateStones(dt) {
    for (var i = 0; i < pages.length; ++i) {
        var page = pages[i];
        if (page.stones != null && page.stoneRoot.visible == true) {
            for (var j = 0; j < page.stones.length; ++j) {
                var stone = page.stones[j];
                stone.rotateAngle = .008;
                stone.rotateOnAxis(stone.rotateAxis, stone.rotateAngle)
            }
        }
    }
}
function loadTexture(imgPath) {
    loadingCount++;
    loadingAmount++;
    console.log("loadingCount : " + loadingCount);
    return THREE.ImageUtils.loadTexture(imgPath, null, function () {
        loadingCount--;
        notifyLoadingProgress(loadingCount, loadingAmount);
        console.log("loadingCount : " + loadingCount)
    })
}
function loadObj(objPath, imgOrColor, meshCallback, objectCallback) {
    var onProgress = function (xhr) {
        if (xhr.lengthComputable) {
            var percentComplete = xhr.loaded / xhr.total * 100;
            console.log(Math.round(percentComplete, 2) + "% downloaded")
        }
    };
    var onError = function (xhr) {
    };
    var objLoader = new THREE.OBJLoader;
    loadingCount++;
    loadingAmount++;
    console.log("loadingCount : " + loadingCount);
    objLoader.load(objPath, function (object) {
        loadingCount--;
        notifyLoadingProgress(loadingCount, loadingAmount);
        console.log("loadingCount : " + loadingCount);
        for (var i = 0; i < object.children.length; i++) {
            var mesh = object.children[i];
            mesh.frustumCulled = false;
            if (typeof imgOrColor == "string") {
                mesh.material = new THREE.MeshBasicMaterial({
                    opacity: 1,
                    transparent: true,
                    map: loadTexture(imgOrColor + img_v)
                })
            } else if (imgOrColor instanceof THREE.Color) {
                mesh.material = new THREE.MeshBasicMaterial({
                    opacity: imgOrColor.a,
                    transparent: true,
                    color: imgOrColor
                })
            } else if (imgOrColor instanceof THREE.Texture) {
                mesh.material = new THREE.MeshBasicMaterial({opacity: 1, transparent: true, map: imgOrColor})
            }
            if (meshCallback != null) meshCallback(object, mesh)
        }
        if (objectCallback != null) objectCallback(object)
    }, onProgress, onError)
}
function addPage(img, yearGap) {
    var pageIdx = pages.length;
    var yearHeight = yearGap || defaultYearHeight;
    pages[pageIdx] = {};
    pages[pageIdx].idx = pageIdx;
    pages[pageIdx].yearHeight = yearHeight;
    pages[pageIdx].root = new THREE.Group;
    var y = 0;
    for (var i = 1; i <= pageIdx; ++i) {
        y = y - (bgHeight + pages[i].yearHeight)
    }
    pages[pageIdx].posY = y;
    pages[pageIdx].root.position.set(0, y, 0);
    sceneRoot.add(pages[pageIdx].root);
    var mat = new THREE.MeshBasicMaterial({transparent: true, opacity: 1, map: loadTexture(img + img_v)});
    mat.depthTest = false;
    mat.depthWrite = false;
    pages[pageIdx].bg = new THREE.Mesh(new THREE.PlaneGeometry(bgWidth, bgHeight, 4, 4), mat);
    pages[pageIdx].bg.position.set(0, 0, 0);
    pages[pageIdx].bg.renderOrder = 0;
    pages[pageIdx].bg.visible = true;
    scene.add(pages[pageIdx].bg);
    if (pageIdx != 0) {
        pages[pageIdx].bg.material.opacity = 0
    }
    initPage(pageIdx)
}
function buildPageYearMat(yearImg) {
    var fs = "     uniform sampler2D   shineMap;     uniform sampler2D  colorMap;    varying vec2  vUv;     uniform float progress;    vec3 overlay(vec3 dest, vec3 src, float alpha) {        vec3 ret = vec3(0.0);        if (dest.r <= 0.5)            ret.r = 2.0 * dest.r * src.r;        else            ret.r = 1.0 - 2.0 * (1.0 - dest.r) * (1.0 - src.r);        if (dest.g <= 0.5)            ret.g = 2.0 * dest.g * src.g;        else            ret.g = 1.0 - 2.0 * (1.0 - dest.g) * (1.0 - src.g);        if (dest.b <= 0.5)            ret.b = 2.0 * dest.b * src.b;        else            ret.b = 1.0 - 2.0 * (1.0 - dest.b) * (1.0 - src.b);        ret = dest * (1.0 - alpha) + ret * alpha;        return ret;    }    void main() {         vec4 color = texture2D(colorMap, vUv);        gl_FragColor = color;         if (progress < 1.0) {            vec2 shineUV = vec2(vUv.x, (vUv.y - progress) * 4.0);            vec4 shine = texture2D(shineMap, shineUV);            gl_FragColor.rgb = overlay(gl_FragColor.rgb, shine.rgb, shine.a);        }    }     ";
    var vs = "     varying vec2 vUv;     void main() {         vUv = uv;         gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );     }     ";
    var shineTex = loadTexture("img/scene/shine.png" + img_v);
    var yearTex = loadTexture(yearImg + img_v);
    var mat = new THREE.ShaderMaterial({
        opacity: 1,
        transparent: true,
        uniforms: {
            shineMap: {type: "t", value: shineTex},
            colorMap: {type: "t", value: yearTex},
            progress: {type: "f", value: 1}
        },
        vertexShader: vs,
        fragmentShader: fs
    });
    return mat
}
function startScene(isEn) {
    isSceneStarted = true;
    if (isEn == null) {
        isEnglish = false
    } else {
        isEnglish = isEn
    }
}
function layoutPlane(picWidth, picHeight, xpixel, ypixel, imgPath) {
    var w = bgWidth * picWidth / 640;
    var h = w * picHeight / picWidth;
    var px = xpixel / 640 * bgWidth;
    var py = ypixel / 1136 * bgHeight;
    return createPlane(imgPath, w, h, px, py)
}
function initPage(pageIdx) {
    console.log("pageIdx = " + pageIdx);
    var page = pages[pageIdx];
    if (pageIdx >= 1 && pageIdx <= 8) {
        var yearTextW = bgWidth * .75;
        var yearTextH = yearTextW * .458;
        var year = new THREE.Mesh(new THREE.PlaneGeometry(yearTextW, yearTextH, 4, 4), buildPageYearMat("img/scene/bg_" + pageIdx + "_year.png" + img_v));
        year.renderOrder = 3;
        year.visible = true;
        year.position.set(0, bgHeight * .5 + defaultYearHeight * .5, 0);
        year.shine = function (isDown) {
            var to = 1;
            if (isDown) {
                year.material.uniforms.progress.value = 2;
                to = -.2
            } else {
                year.material.uniforms.progress.value = -1;
                to = 1
            }
            var tween = new TWEEN.Tween(year.material.uniforms.progress).to({value: to}, 2e3).easing(TWEEN.Easing.Quadratic.Out).start()
        };
        pages[pageIdx].year = year;
        pages[pageIdx].root.add(year)
    }
    switch (pageIdx) {
        case 0: {
            page.robotbg = layoutPlane(640, 1501, 0, -372, "page_res/page0/robot_bg.png" + img_v);
            page.root.add(page.robotbg);
            page.robotbg.visible = true;
            page.robotbg.renderOrder = 2;
            page.robotbg.material.opacity = 1;
            var w = bgWidth * 419 / 640;
            var h = 1.081 * w;
            page.aiBrief = createPlane("page_res/page0/ai_brief.png" + img_v, w, h, (w - bgWidth) / 2, (bgHeight - h) / 2);
            page.root.add(page.aiBrief);
            page.aiBrief.visible = true;
            page.aiBrief.renderOrder = 2;
            page.aiBrief.material.opacity = 1;
            page.onTouchStart = function (event) {
                if (curPage != 0 || !isSceneStarted)return;
                pages[0].touchDownRobotProgress = pages[0].curRobotProgress;
                pages[0].touchStartPos = {};
                pages[0].touchStartPos.x = event.touches[0].clientX / window.innerWidth * 2 - 1;
                pages[0].touchStartPos.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1;
                pages[0].touchEvent = event
            };
            page.onTouchMove = function (event) {
                if (curPage != 0 || !isSceneStarted)return;
                pages[0].touchEvent = event;
                pages[0].touchPos = {};
                pages[0].touchPos.x = event.touches[0].clientX / window.innerWidth * 2 - 1;
                pages[0].touchPos.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1;
                var diffX = pages[0].touchPos.x - pages[0].touchStartPos.x;
                var diffY = pages[0].touchPos.y - pages[0].touchStartPos.y;
                pages[0].setRobotProgress(pages[0].touchDownRobotProgress + diffY * 2)
            };
            page.onTouchEnd = function (event) {
                if (curPage != 0 || !isSceneStarted)return
            };
            page.setRobotProgress = function (p) {
                console.log("setRobotProgress " + p);
                if (p < 0) {
                    p = 0;
                    enableMovePage = false
                } else if (p >= 1) {
                    p = 1;
                    enableMovePage = true;
                    if (!isTouchStart) {
                        onTouchStart(pages[0].touchEvent)
                    }
                }
                pages[0].curRobotProgress = p;
                pages[0].interpolateRobot(p)
            };
            page.isRobotAnimating = false;
            page.robotAnimateProgress = 0;
            page.update = function () {
                if (pages[0].isRobotAnimating) {
                    pages[0].interpolateRobot(pages[0].robotAnimateProgress)
                }
            };
            page.animateRobot = function () {
                pages[0].isRobotAnimating = true;
                var tween = new TWEEN.Tween(pages[0]).to({robotAnimateProgress: 1}, 4e3).easing(TWEEN.Easing.Quadratic.InOut).onComplete(function () {
                    pages[0].isRobotAnimating = false
                }).start()
            };
            page.interpolateRobot = function (t) {
                var t70 = t;
                var t50 = t70 * 70 / 40;
                if (t50 > 1) {
                    t50 = 1
                }
                var bodyMesh = meshes["shouye_shenti"];
                var headMesh = meshes["shouye_toubu"];
                var a = .0175 * 6;
                var end = -8 * .0175;
                var p = a + (end - a) * t70;
                bodyMesh.setRotationFromAxisAngle(new THREE.Vector3(0, 1, 0), p);
                var bsc = 1.03;
                bodyMesh.scale.x = bsc + (1.01 - bsc) * t70;
                var ra = .0175 * 0 * 1;
                var rb = .0175 * 8 * 1;
                var rc = .0175 * -2 * 1;
                headMesh.setRotationFromEuler(new THREE.Euler(ra - ra * t70, rb - t70 * rb, rc - t70 * rc, "XYZ"));
                var sc = 1.03
            };
            addStones(page, 45, -bgWidth * .5, bgWidth * .5, -bgHeight * .5, bgHeight * .5);
            loadObj("page_res/page0/shenti.obj", "page_res/page0/shenti.png" + img_v, function (object, mesh) {
                console.log("mesh : " + mesh.name);
                meshes[mesh.name] = mesh;
                var scale = bgWidth * .12;
                object.scale.set(scale, scale, scale);
                object.position.set(-.135 * bgWidth, -.34 * bgHeight, 0);
                page.root.add(object);
                mesh.renderOrder = 3;
                mesh.visible = true;
                mesh.object = object;
                mesh.material.depthTest = false;
                mesh.material.depthWrite = false;
                shatterize(mesh)
            }, function (bodyObject) {
                loadObj("page_res/page0/toubu.obj", "page_res/page0/toubu.png" + img_v, function (object, mesh) {
                    console.log("mesh : " + mesh.name);
                    meshes[mesh.name] = mesh;
                    var scale = bgWidth * .12;
                    object.position.set(.966, 1.871, -.44);
                    meshes["shouye_shenti"].add(object);
                    mesh.renderOrder = 3;
                    mesh.visible = true;
                    mesh.object = object;
                    mesh.material.depthTest = false;
                    mesh.material.depthWrite = false;
                    mesh.frustumCulled = false;
                    shatterize(mesh);
                    page.setRobotProgress(0)
                })
            })
        }
            break;
        case 1: {
            addStones(page, 20, -bgWidth * .5, bgWidth * .5, -bgHeight * .3, bgHeight * .5);
            loadObj("page_res/page1/yemian_2.obj", wujian1Tex, function (object, mesh) {
                console.log("mesh : " + mesh.name);
                meshes[mesh.name] = mesh;
                mesh.renderOrder = 3;
                mesh.visible = true;
                mesh.material.depthTest = false;
                mesh.material.depthWrite = false;
                shatterize(mesh)
            }, function (object) {
                var scale = bgWidth * .08;
                object.scale.set(scale, scale, scale);
                object.position.set(0, .05 * bgHeight, 0);
                page.root.add(object)
            });
            page.desc = layoutPlane(458, 92, -3, -383, "page_res/page1/desc.png" + img_v);
            page.root.add(page.desc);
            page.desc.visible = false;
            page.desc.material.opacity = 0;
            if (multilingual) {
                page.desc_en = layoutPlane(458, 92, -3, -383, "page_res/page1/desc_en.png" + img_v);
                page.root.add(page.desc_en);
                page.desc_en.visible = false;
                page.desc_en.material.opacity = 0
            } else {
                page.desc_en = page.desc
            }
        }
            break;
        case 2: {
            addStones(page, 20, -bgWidth * .5, bgWidth * .5, -bgHeight * .25, bgHeight * .5);
            loadObj("page_res/page2/shitou.obj", wujian1Tex, function (object, mesh) {
                console.log("mesh : " + mesh.name);
                meshes[mesh.name] = mesh;
                mesh.renderOrder = 3;
                mesh.material.depthTest = false;
                mesh.material.depthWrite = false;
                shatterize(mesh)
            }, function (object) {
                var scale = bgWidth * .08;
                object.scale.set(scale, scale, scale);
                object.position.set(0, -.12 * bgHeight, 0);
                page.root.add(object);
                var fs = "                 uniform sampler2D   tex1;                 uniform sampler2D  tex2;                varying vec2  vUv;                 uniform float height1;                uniform float height2;                uniform float timey;                void main() {                     vec2 uv1 = vUv;                    vec2 uv2 = vUv;                    float ychange = 1.0-timey;                    uv1.y= (uv2.y-ychange)*height2/height1;                    vec4 color1 = texture2D(tex1,uv1);                    vec4 color = color1;                     if(uv1.y>0.1){                        vec4 color2 = texture2D(tex2,uv2);                        color = color1.a*color1+(1.0-color1.a)*color2;                    }                    gl_FragColor = color;                 }                 ";
                var vs = "                 varying vec2 vUv;                 void main() {                     vUv = uv;                     gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );                 }                 ";
                var texture1 = loadTexture("page_res/page2/scan.png" + img_v);
                var texture2 = loadTexture("page_res/page2/people.png" + img_v);
                var tm = new THREE.ShaderMaterial({
                    opacity: 1,
                    transparent: true,
                    uniforms: {
                        tex1: {type: "t", value: texture1},
                        tex2: {type: "t", value: texture2},
                        height1: {type: "f", value: 333},
                        height2: {type: "f", value: 812},
                        timey: {type: "f", value: 0}
                    },
                    vertexShader: vs,
                    fragmentShader: fs
                });
                page.scanMat = tm;
                var w = bgWidth * 1;
                var h = 1.269 * w;
                page.people = createPlane("page_res/page2/people.png" + img_v, w, h, 0, .1 * bgHeight, tm);
                page.root.add(page.people)
            });
            page.desc = layoutPlane(438, 131, -14, -410, "page_res/page2/desc.png" + img_v);
            page.root.add(page.desc);
            page.desc.visible = false;
            page.desc.material.opacity = 0;
            if (multilingual) {
                page.desc_en = layoutPlane(438, 131, -14, -410, "page_res/page2/desc_en.png" + img_v);
                page.root.add(page.desc_en);
                page.desc_en.visible = false;
                page.desc_en.material.opacity = 0
            } else {
                page.desc_en = page.desc
            }
        }
            break;
        case 3: {
            addStones(page, 10, -bgWidth * .5, bgWidth * .5, -bgHeight * .25, bgHeight * .5);
            var w = bgWidth * 1;
            var h = .8 * w;
            page.env = createPlane("page_res/page3/env.png" + img_v, w, h, 0, .1 * bgHeight);
            page.root.add(page.env);
            var w = bgWidth * .86;
            var h = w * .6;
            var px = 0;
            var py = -.05 * bgHeight;
            var picArr = new Array;
            for (var i = 0; i <= 66; ++i) {
                var img = "page_res/page3/frames/" + i + ".png" + img_v;
                picArr.push(img)
            }
            page.jixie2d = createPlane(picArr[0], w, h, px, py);
            page.jixie2d.visible = false;
            page.jixie2d.material.opacity = 0;
            page.root.add(page.jixie2d);
            page.jixie2dAni = pictureFrameAnimation(1e3, 0, picArr, function (frameTexture) {
                page.jixie2d.material.map = frameTexture
            }, true, false);
            loadObj("page_res/page3/jixiebi.obj", wujian1Tex, function (object, mesh) {
                console.log("mesh : " + mesh.name);
                meshes[mesh.name] = mesh;
                mesh.renderOrder = 3;
                mesh.material.depthTest = false;
                mesh.material.depthWrite = false;
                shatterize(mesh)
            }, function (object) {
                var scale = bgWidth * .1;
                object.scale.set(scale, scale, scale);
                object.position.set(0, -.05 * bgHeight, 0);
                page.root.add(object)
            });
            page.desc = layoutPlane(288, 125, -13, -413, "page_res/page3/desc.png" + img_v);
            page.root.add(page.desc);
            page.desc.visible = false;
            page.desc.material.opacity = 0;
            if (multilingual) {
                page.desc_en = layoutPlane(288, 125, -13, -413, "page_res/page3/desc_en.png" + img_v);
                page.root.add(page.desc_en);
                page.desc_en.visible = false;
                page.desc_en.material.opacity = 0
            } else {
                page.desc_en = page.desc
            }
        }
            break;
        case 4: {
            addStones(page, 5, -bgWidth * .5, bgWidth * .5, bgHeight * .3, bgHeight * .5);
            addStones(page, 5, -bgWidth * .5, -bgWidth * .25, -bgHeight * .1, bgHeight * .5);
            addStones(page, 5, bgWidth * .25, bgWidth * .5, -bgHeight * .1, bgHeight * .5);
            loadObj("page_res/page4/ground.obj", huoxinTex, function (object, mesh) {
                console.log("mesh : " + mesh.name);
                meshes[mesh.name] = mesh;
                mesh.renderOrder = 3;
                mesh.material.depthTest = false;
                mesh.material.depthWrite = false;
                shatterize(mesh)
            }, function (object) {
                var scale = bgWidth * .09;
                object.scale.set(scale, scale, scale);
                object.position.set(0, -.26 * bgHeight, 0);
                page.root.add(object);
                var w = bgWidth * .672;
                var h = w * .9;
                var px = 1 * bgWidth;
                var py = -.2 * bgHeight;
                var picArr = new Array("page_res/page4/frames/car_00000.png" + img_v, "page_res/page4/frames/car_00001.png" + img_v, "page_res/page4/frames/car_00002.png" + img_v, "page_res/page4/frames/car_00003.png" + img_v, "page_res/page4/frames/car_00004.png" + img_v);
                page.car2d = createPlane(picArr[0], w, h, px, py);
                page.car2d.initPosX = px;
                page.car2d.initPosY = py;
                page.car2d.initScale = .2;
                page.car2d.scale.x = page.car2d.initScale;
                page.car2d.scale.y = page.car2d.initScale;
                page.car2d.scale.z = page.car2d.initScale;
                page.car2d.visible = false;
                page.root.add(page.car2d);
                page.wheelAni = pictureFrameAnimation(300, 0, picArr, function (frameTexture) {
                    page.car2d.material.map = frameTexture
                })
            });
            page.desc = layoutPlane(319, 129, 8, 207, "page_res/page4/desc.png" + img_v);
            page.root.add(page.desc);
            page.desc.visible = false;
            page.desc.material.opacity = 0;
            if (multilingual) {
                page.desc_en = layoutPlane(319, 129, 8, 207, "page_res/page4/desc_en.png" + img_v);
                page.root.add(page.desc_en);
                page.desc_en.visible = false;
                page.desc_en.material.opacity = 0
            } else {
                page.desc_en = page.desc
            }
        }
            break;
        case 5: {
            addStones(page, 20, -bgWidth * .5, bgWidth * .5, -bgHeight * .3, bgHeight * .5);
            page.env = layoutPlane(640, 372, -13, 211, "page_res/page5/env.png" + img_v);
            page.root.add(page.env);
            page.ground = layoutPlane(640, 491, 0, -171, "page_res/page5/ground.png" + img_v);
            page.root.add(page.ground);
            page.tipBack = layoutPlane(259, 99, -132, -150, "page_res/page5/left.png" + img_v);
            page.tipBack.material.opacity = 0;
            page.root.add(page.tipBack);
            page.initDogAngle = -.8;
            page.curDogAngle = page.initDogAngle;
            page.setCurDogAngle = function (angle) {
                console.log("setCurDogAngle " + angle);
                pages[5].curDogAngle = angle;
                pages[5].dogParent.setRotationFromAxisAngle(new THREE.Vector3(0, 1, 0), angle)
            };
            var manager = new THREE.LoadingManager;
            manager.onProgress = function (item, loaded, total) {
                console.log(item, loaded, total)
            };
            var onProgress = function (xhr) {
                if (xhr.lengthComputable) {
                    var percentComplete = xhr.loaded / xhr.total * 100;
                    console.log(Math.round(percentComplete, 2) + "% downloaded")
                }
            };
            var onError = function (xhr) {
                console.error(xhr)
            };
            var loader = new THREE.FBXLoader(manager);
            loadingCount++;
            console.log("loadingCount : " + loadingCount);
            loader.load("page_res/page5/dog.fbx", function (object) {
                loadingCount--;
                notifyLoadingProgress(loadingCount, loadingAmount);
                console.log("loadingCount : " + loadingCount);
                page.dog = object;
                var dogParent = new THREE.Group;
                object.rotateOnAxis(new THREE.Vector3(1, 0, 0), .2);
                dogParent.add(object);
                page.dogParent = dogParent;
                page.dogParent.scale.x = 1.2;
                page.dogParent.scale.y = 1.2;
                page.dogParent.scale.z = 1.2;
                pages[5].isDogHeadAnimating = false;
                page.onDogHeadTouch = function () {
                    if (page.isDogHeadAnimating)return;
                    pages[5].isDogHeadAnimating = true;
                    pages[5].headAniProgress = {value: 0};
                    pages[5].headAni = new TWEEN.Tween(pages[5].headAniProgress).to({value: 1}, 400).onUpdate(function () {
                        var p = pages[5].headAniProgress.value;
                        pages[5].interpolateHead(p)
                    }).onComplete(function () {
                        pages[5].isDogHeadAnimating = false
                    }).easing(TWEEN.Easing.Quadratic.In).repeat(3).yoyo(true).start();
                    pages[5].xiabaAniProgress = {value: 0};
                    pages[5].xiabaAni = new TWEEN.Tween(pages[5].xiabaAniProgress).to({value: 1}, 200).onUpdate(function () {
                        var p = pages[5].xiabaAniProgress.value;
                        pages[5].interpolateXiaba(p)
                    }).onComplete(function () {
                    }).easing(TWEEN.Easing.Quadratic.In).repeat(3).yoyo(true).delay(200).start();
                    setTimeout(function () {
                        pages[5].earAniProgress = {value: 0};
                        pages[5].earAni = new TWEEN.Tween(pages[5].earAniProgress).to({value: 1}, 200).onUpdate(function () {
                            var p = pages[5].earAniProgress.value;
                            pages[5].interpolateEar(p)
                        }).onComplete(function () {
                        }).easing(TWEEN.Easing.Quadratic.In).repeat(3).yoyo(true).start()
                    }, 200);
                    var angle = {};
                    angle.x = 18.22;
                    var axis = new THREE.Vector3(1, 0, 0);
                    page.weibaAni = new TWEEN.Tween(angle).to({x: -5}, 1e3).onUpdate(function () {
                        var ret = angle.x * 3.1417 / 360;
                        console.log(ret);
                        page.weiba.setRotationFromEuler(new THREE.Euler(ret, 0, 0, "XYZ"))
                    }).easing(TWEEN.Easing.Quadratic.In).repeat(3).yoyo(true).start()
                };
                {
                    var m = object.getChildByName("erduo_zuo");
                    meshes[m.name] = m;
                    m.onTouchDown = page.onDogHeadTouch;
                    var m = object.getChildByName("erduo_you");
                    meshes[m.name] = m;
                    m.onTouchDown = page.onDogHeadTouch;
                    var m = object.getChildByName("zuiba");
                    meshes[m.name] = m;
                    m.onTouchDown = page.onDogHeadTouch
                }
                page.toubozi = object.getChildByName("tou_bozi");
                page.xiaba = object.getChildByName("pasted__pasted__polySurface46");
                page.leftEar = object.getChildByName("erduo_zuo");
                page.rightEar = object.getChildByName("erduo_you");
                {
                    page.interpolateHead = function (t) {
                        var from = 43.765;
                        var to = 24.3;
                        var angle = (from + (to - from) * t) * .0175;
                        page.toubozi.setRotationFromEuler(new THREE.Euler(angle, 0, 0, "XYZ"))
                    }
                }
                {
                    page.interpolateXiaba = function (t) {
                        var from = -19.42;
                        var to = -1.89;
                        var angle = (from + (to - from) * t) * .0175;
                        page.xiaba.setRotationFromEuler(new THREE.Euler(angle, 0, 0, "XYZ"))
                    }
                }
                {
                    page.interpolateEar = function (t) {
                        var from = -.418;
                        var to = 3;
                        var yangle = (from + (to - from) * t) * .0175;
                        var from = -1.632;
                        var to = 12.08;
                        var zangle = (from + (to - from) * t) * .0175;
                        page.leftEar.setRotationFromEuler(new THREE.Euler(-14.2 * .0175, yangle, zangle, "XYZ"));
                        var from = 0;
                        var to = 3.4;
                        var yangle = (from + (to - from) * t) * .0175;
                        var from = 0;
                        var to = -13.6;
                        var zangle = (from + (to - from) * t) * .0175;
                        page.rightEar.setRotationFromEuler(new THREE.Euler(-14.2 * .0175, yangle, zangle, "XYZ"))
                    }
                }
                page.weiba = object.getChildByName("weiba_2");
                var screen = object.getChildByName("pingmu");
                var r = "page_res/page5/texture_cube/";
                var urls = [r + "posx.jpg" + img_v, r + "negx.jpg" + img_v, r + "posy.jpg" + img_v, r + "negy.jpg" + img_v, r + "posz.jpg" + img_v, r + "negz.jpg" + img_v];
                loadingCount++;
                var textureCube = (new THREE.CubeTextureLoader).load(urls, function () {
                    loadingCount--;
                    notifyLoadingProgress(loadingCount, loadingAmount)
                });
                if (screen) {
                    var screenMat = screen.material;
                    screenMat.shininess = 5;
                    screenMat.map = null;
                    screenMat.specular.x = 1;
                    screenMat.specular.y = 1;
                    screenMat.specular.z = 1;
                    screenMat.color.r = .1;
                    screenMat.color.g = .1;
                    screenMat.color.b = .1;
                    screenMat.envMap = textureCube;
                    screenMat.reflectivity = .5
                }
                var mouth = object.getChildByName("zuiba");
                if (mouth) {
                    var mouthMat = mouth.material;
                    mouthMat.shininess = 2;
                    mouthMat.specular.x = .6;
                    mouthMat.specular.y = .6;
                    mouthMat.specular.z = .6;
                    mouthMat.color.r = .733;
                    mouthMat.color.g = .73;
                    mouthMat.color.b = .802;
                    mouthMat.envMap = textureCube;
                    mouthMat.reflectivity = .2
                }
                object.mixer = new THREE.AnimationMixer(object);
                mixers.push(object.mixer);
                var action = object.mixer.clipAction(object.animations[0]);
                object.renderOrder = 4;
                object.visible = true;
                var scale = bgWidth * .05;
                object.scale.set(scale, scale, scale);
                object.position.set(0, -.05 * bgHeight, -.15 * bgWidth);
                pages[5].setCurDogAngle(pages[5].initDogAngle);
                for (var i = 0; i < object.children.length; ++i) {
                    pages[5].initDogMesh(object.children[i])
                }
                page.root.add(dogParent);
                page.tipFront = layoutPlane(259, 99, 131, -219, "page_res/page5/right.png");
                page.tipFront.material.opacity = 0;
                page.root.add(page.tipFront);
                page.tipHead = layoutPlane(54, 57, -145, 238, "page_res/page5/hint_head.png");
                page.tipHead.material.opacity = 1;
                page.tipHead.renderOrder = 5;
                page.root.add(page.tipHead)
            }, onProgress, onError);
            page.initDogMesh = function (mesh) {
                dogMeshes.push(mesh);
                mesh.renderOrder = 4;
                mesh.material.side = 2;
                mesh.material.depthTest = true;
                mesh.material.depthWrite = true;
                mesh.material.transparent = true;
                for (var i = 0; i < mesh.children.length; ++i) {
                    var m = mesh.children[i];
                    page.initDogMesh(m)
                }
            };
            page.mergeDogMesh = function (dir, fromOffset) {
                return;
                for (var i = 0; i < dogMeshes.length; ++i) {
                    var m = dogMeshes[i];
                    merge(m, dir, {fromOffset: fromOffset})
                }
            };
            page.scatterDogMesh = function (dir, toOffset, maxVel) {
                return;
                for (var i = 0; i < dogMeshes.length; ++i) {
                    var m = dogMeshes[i];
                    scatter(m, dir, toOffset, maxVel)
                }
            };
            page.fadeEventTrigger = false;
            page.onTouchStart = function (event) {
                if (curPage != 5)return;
                pages[5].touchDownDogAngle = pages[5].curDogAngle;
                pages[5].touchStartPos = {};
                pages[5].touchStartPos.x = event.touches[0].clientX / window.innerWidth * 2 - 1;
                pages[5].touchStartPos.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1
            };
            page.onTouchMove = function (event) {
                if (curPage != 5)return;
                if (!page.fadeEventTrigger) {
                    page.fadeEventTrigger = false
                }
                var touchPos = {};
                touchPos.x = event.touches[0].clientX / window.innerWidth * 2 - 1;
                touchPos.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1;
                var diffX = touchPos.x - pages[5].touchStartPos.x;
                var diffY = touchPos.y - pages[5].touchStartPos.y;
                pages[5].setCurDogAngle(pages[5].touchDownDogAngle + diffX);
                if (Math.abs(diffY) < Math.abs(diffX)) {
                    enableMovePage = false
                }
            };
            page.onTouchEnd = function (event) {
                if (curPage != 5)return;
                enableMovePage = true
            };
            page.desc = layoutPlane(417, 134, 0, -399, "page_res/page5/desc.png" + img_v);
            page.root.add(page.desc);
            page.desc.visible = false;
            page.desc.material.opacity = 0;
            if (multilingual) {
                page.desc_en = layoutPlane(417, 134, 0, -399, "page_res/page5/desc_en.png" + img_v);
                page.root.add(page.desc_en);
                page.desc_en.visible = false;
                page.desc_en.material.opacity = 0
            } else {
                page.desc_en = page.desc
            }
        }
            break;
        case 6: {
            addStones(page, 20, -bgWidth * .5, bgWidth * .5, -bgHeight * .3, bgHeight * .5);
            page.dotTex = loadTexture("page_res/page6/dot.png" + img_v);
            page.lightTex = loadTexture("page_res/page6/light.png" + img_v);
            page.dots = [];
            page.lights = [];
            page.tags = [];
            page.tags_en = [];
            page.dropDot = function (x, y) {
                var dot = createPlane(pages[6].dotTex, .1 * bgWidth, .1 * bgWidth, x, y);
                var light = createPlane(pages[6].lightTex, .1 * bgWidth, .1 * bgWidth, x, y);
                var tagH = .07 * bgWidth;
                var tag = createPlane("page_res/page6/" + (pages[6].tags.length + 1) + ".png" + img_v, 3.24 * tagH, tagH, x + .05 * bgWidth, y + .07 * bgWidth);
                var tag_en = tag;
                if (multilingual) {
                    tag_en = createPlane("page_res/page6/" + (pages[6].tags_en.length + 1) + "_en.png" + img_v, 3.24 * tagH, tagH, x + .05 * bgWidth, y + .07 * bgWidth)
                }
                dot.position.z = .12 * bgWidth;
                light.position.z = .1 * bgWidth;
                tag.position.z = .1 * bgWidth;
                tag_en.position.z = .1 * bgWidth;
                pages[6].dots[pages[6].dots.length] = dot;
                pages[6].lights[pages[6].lights.length] = light;
                pages[6].tags[pages[6].tags.length] = tag;
                pages[6].tags_en[pages[6].tags_en.length] = tag_en;
                pages[6].root.add(light);
                pages[6].root.add(dot);
                pages[6].root.add(tag);
                pages[6].root.add(tag_en);
                light.visible = false;
                light.material.opacity = 0;
                dot.visible = false;
                dot.material.opacity = 0;
                tag.visible = false;
                tag.material.opacity = 0;
                tag_en.visible = false;
                tag_en.material.opacity = 0
            };
            page.dropDot(-.2 * bgWidth, .28 * bgWidth);
            page.dropDot(.18 * bgWidth, .22 * bgWidth);
            page.dropDot(-0 * bgWidth, .15 * bgWidth);
            page.dropDot(-.24 * bgWidth, 0 * bgWidth);
            page.dropDot(.27 * bgWidth, 0 * bgWidth);
            page.dropDot(0 * bgWidth, -.1 * bgWidth);
            var w = bgWidth * 1;
            var h = .91 * w;
            page.brainBg = createPlane("page_res/page6/brain_bg.png" + img_v, w, h, 0, 0 * bgHeight);
            page.root.add(page.brainBg);
            page.brainBg.visible.false = true;
            page.brainBg.material.opacity = 0;
            loadObj("page_res/page6/brain.obj", wujian3Tex, function (object, mesh) {
                console.log("mesh : " + mesh.name);
                meshes[mesh.name] = mesh;
                mesh.renderOrder = 3;
                mesh.material.depthTest = false;
                mesh.material.depthWrite = false;
                shatterize(mesh)
            }, function (object) {
                var scale = bgWidth * .1;
                object.scale.set(scale, scale, scale);
                object.position.set(0, 0 * bgHeight, 0);
                page.root.add(object)
            });
            page.desc = layoutPlane(346, 96, 13, -392, "page_res/page6/desc.png" + img_v);
            page.root.add(page.desc);
            page.desc.visible = false;
            page.desc.material.opacity = 0;
            if (multilingual) {
                page.desc_en = layoutPlane(346, 96, 13, -392, "page_res/page6/desc_en.png" + img_v);
                page.root.add(page.desc_en);
                page.desc_en.visible = false;
                page.desc_en.material.opacity = 0
            } else {
                page.desc_en = page.desc
            }
        }
            break;
        case 7: {
            addStones(page, 20, -bgWidth * .5, bgWidth * .5, -bgHeight * .35, bgHeight * .5);
            var w = bgWidth * .8;
            var h = .725 * w;
            page.board = createPlane("page_res/page7/board.png" + img_v, w, h, 0, .05 * bgHeight);
            page.root.add(page.board);
            page.board.visible = false;
            page.board.material.opacity = 0;
            var w = bgWidth * .1;
            var h = 4.5 * w;
            page.scan = createPlane("page_res/page7/scan.png" + img_v, w, h, 0, .05 * bgHeight);
            page.root.add(page.scan);
            page.scan.visible = false;
            page.scan.material.opacity = 0;
            var w = bgWidth * .76;
            var h = 1.064 * w;
            page.shadow = createPlane("page_res/page7/shadow.png" + img_v, w, h, -.06 * bgWidth, .04 * bgHeight);
            page.root.add(page.shadow);
            page.shadow.visible = false;
            page.shadow.material.opacity = 0;
            loadObj("page_res/page7/head.obj", wujian3Tex, function (object, mesh) {
                console.log("mesh : " + mesh.name);
                meshes[mesh.name] = mesh;
                mesh.renderOrder = 3;
                mesh.material.depthTest = false;
                mesh.material.depthWrite = false;
                shatterize(mesh)
            }, function (object) {
                var scale = bgWidth * .09;
                object.scale.set(scale, scale, scale);
                object.position.set(-.055 * bgWidth, .045 * bgHeight, 0);
                page.root.add(object)
            });
            page.desc = layoutPlane(397, 96, 7, -381, "page_res/page7/desc.png" + img_v);
            page.root.add(page.desc);
            page.desc.visible = false;
            page.desc.material.opacity = 0;
            if (multilingual) {
                page.desc_en = layoutPlane(397, 96, 7, -381, "page_res/page7/desc_en.png" + img_v);
                page.root.add(page.desc_en);
                page.desc_en.visible = false;
                page.desc_en.material.opacity = 0
            } else {
                page.desc_en = page.desc
            }
        }
            break;
        case 8: {
            addStones(page, 20, -bgWidth * .5, bgWidth * .5, -bgHeight * .2, bgHeight * .5);
            var w = bgWidth * 1;
            var h = w * 1;
            var px = 0;
            var py = .07 * bgHeight;
            var picArr = new Array;
            for (var i = 1; i <= 22; ++i) {
                var img = "page_res/page8/frames/" + i + ".png" + img_v;
                picArr.push(img)
            }
            page.chess2d = createPlane(picArr[0], w, h, px, py);
            page.root.add(page.chess2d);
            page.chess2dStartAni = pictureFrameAnimation(3e3, 0, picArr, function (frameTexture) {
                page.chess2d.material.map = frameTexture
            }, false);
            picArr = [];
            for (var i = 34; i <= 56; ++i) {
                var imgstr = "page_res/page8/chess_rotate/chess_000" + i + ".png" + img_v;
                var img = loadTexture(imgstr);
                picArr.push(img)
            }
            page.chess2d.textures = picArr;
            page.chess2dSwapAni = pictureFrameAnimation(3e3, 0, picArr, function (frameTexture) {
                page.chess2d.material.map = frameTexture
            }, false);
            page.isKejie = false;
            page.chess2d.onTouchDown = function () {
            };
            loadObj("page_res/page8/hand_robot.obj", wujian3Tex, function (object, mesh) {
                console.log("mesh : " + mesh.name);
                meshes[mesh.name] = mesh;
                mesh.renderOrder = 3;
                mesh.material.side = 2;
                mesh.material.depthTest = false;
                mesh.material.depthWrite = false;
                shatterize(mesh);
                pages[8].handRobot = mesh
            }, function (object) {
                pages[8].handRobotObj = object;
                pages[8].initScale = {x: bgWidth * .09, y: bgWidth * .09, z: bgWidth * .09};
                pages[8].initPosX = -.36 * bgWidth
                ;var scale = pages[8].initScale.x;
                object.scale.set(pages[8].initScale.x, pages[8].initScale.y, pages[8].initScale.z);
                object.position.set(pages[8].initPosX, -.05 * bgHeight, 0);
                page.root.add(object)
            });
            var w = bgWidth * .2;
            var h = .38 * w;
            page.alphaGo = createPlane("page_res/page8/alpha_go.png" + img_v, w, h, -.25 * bgWidth, -.1 * bgHeight);
            page.root.add(page.alphaGo);
            page.alphaGo.visible = true;
            page.alphaGo.material.opacity = 0;
            page.initAlphaGoPos = {};
            page.initAlphaGoPos.x = page.alphaGo.position.x;
            page.initAlphaGoPos.y = page.alphaGo.position.y;
            loadObj("page_res/page8/hand_human.obj", wujian3Tex, function (object, mesh) {
                console.log("mesh : " + mesh.name);
                meshes[mesh.name] = mesh;
                mesh.renderOrder = 3;
                mesh.material.depthTest = false;
                mesh.material.depthWrite = false;
                page.handLishishi = mesh;
                shatterize(mesh)
            }, function (object) {
                var scale = bgWidth * .09;
                object.scale.set(scale, scale, scale);
                object.position.set(.37 * bgWidth, .22 * bgHeight, 0);
                page.root.add(object)
            });
            var w = bgWidth * .14;
            var h = .49 * w;
            page.tagLishishi = createPlane("page_res/page8/lishishi.png" + img_v, w, h, .23 * bgWidth, .25 * bgHeight);
            page.root.add(page.tagLishishi);
            page.tagLishishi.visible = true;
            page.tagLishishi.material.opacity = 0;
            var w = bgWidth * .5;
            var h = .715 * w;
            page.handKejie = createPlane("page_res/page8/hand_kejie.png" + img_v, w, h, -.32 * bgWidth, .25 * bgHeight);
            page.root.add(page.handKejie);
            page.handKejie.visible = false;
            page.handKejie.material.opacity = 0;
            var w = bgWidth * .14;
            var h = .495 * w;
            page.tagKejie = createPlane("page_res/page8/kejie.png" + img_v, w, h, -.23 * bgWidth, .28 * bgHeight);
            page.root.add(page.tagKejie);
            page.tagKejie.visible = false;
            page.tagKejie.material.opacity = 0;
            page.desc = layoutPlane(310, 130, 7, -400, "page_res/page8/desc.png" + img_v);
            page.root.add(page.desc);
            page.desc.visible = false;
            page.desc.material.opacity = 0;
            pages[8].frameEvents = [];
            var frame03 = {};
            frame03.time = .3;
            frame03.triggerState = false;
            frame03.order = 0;
            frame03.callback = function (t) {
                console.log("change to 2016 t=" + t);
                window.changeYear(2016)
            };
            page.frame2016 = true;
            page.setChessProgress = function (p) {
                if (p < 0) {
                    p = 0;
                    enableMovePage = true;
                    if (!isTouchStart) {
                        onTouchStart(pages[8].touchEvent)
                    }
                } else if (p >= 1) {
                    p = 1;
                    enableMovePage = true;
                    if (!isTouchStart) {
                        onTouchStart(pages[8].touchEvent)
                    }
                } else {
                    enableMovePage = false
                }
                pages[8].curChessProgress = p;
                pages[8].interpolateChess(p);
                if (p < .45 && !page.frame2016) {
                    window.changeYear(2016);
                    page.frame2016 = true
                }
                if (p > .45 && page.frame2016) {
                    window.changeYear(2017);
                    page.frame2016 = false
                }
            };
            pages[8].interpolateChess = function (t) {
                updateChess(t, pages[8])
            };
            pages[8].curChessProgress = 0;
            page.onTouchStart = function (event) {
                if (curPage != 8)return;
                pages[8].touchDownChessProgress = pages[8].curChessProgress;
                pages[8].touchStartPos = {};
                pages[8].touchStartPos.x = event.touches[0].clientX / window.innerWidth * 2 - 1;
                pages[8].touchStartPos.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1;
                pages[8].touchEvent = event
            };
            page.onTouchMove = function (event) {
                if (curPage != 8)return;
                pages[8].touchEvent = event;
                pages[8].touchPos = {};
                pages[8].touchPos.x = event.touches[0].clientX / window.innerWidth * 2 - 1;
                pages[8].touchPos.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1;
                var diffX = pages[8].touchPos.x - pages[8].touchStartPos.x;
                var diffY = pages[8].touchPos.y - pages[8].touchStartPos.y;
                if (Math.abs(sceneRoot.position.y + pages[curPage].posY) < bgHeight * .1) {
                    pages[8].setChessProgress(pages[8].touchDownChessProgress + diffY * 1)
                } else {
                    enableMovePage = true
                }
            };
            page.onTouchEnd = function (event) {
                if (curPage != 8)return
            }
        }
            break;
        case 9: {
            addStones(page, 20, -bgWidth * .5, bgWidth * .5, -bgHeight * .5, bgHeight * .5);
            page.desc = layoutPlane(417, 206, 28, 43, "page_res/page9/desc.png" + img_v);
            page.root.add(page.desc);
            page.desc.visible = false;
            page.desc.material.opacity = 0;
            if (multilingual) {
                page.desc_en = layoutPlane(417, 206, 28, 43, "page_res/page9/desc_en.png" + img_v);
                page.root.add(page.desc_en);
                page.desc_en.visible = false;
                page.desc_en.material.opacity = 0
            } else {
                page.desc_en = page.desc
            }
            page.onTouchStart = function (event) {
                if (curPage != 9)return;
                pages[9].touchStartPos = {};
                pages[9].touchStartPos.x = event.touches[0].clientX / window.innerWidth * 2 - 1;
                pages[9].touchStartPos.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1;
                pages[9].touchDownDescY = page.desc.position.y
            };
            page.onTouchMove = function (event) {
                if (curPage != 9)return;
                var touchPos = {};
                touchPos.x = event.touches[0].clientX / window.innerWidth * 2 - 1;
                touchPos.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1;
                var diffX = touchPos.x - pages[9].touchStartPos.x;
                var diffY = touchPos.y - pages[9].touchStartPos.y;
                console.log("diffY " + diffY);
                if (diffY > .2) {
                    isSceneStarted = false;
                    page.translateAni = new TWEEN.Tween(pages[9].desc.position).to({y: .5 * bgHeight}, 4e3).easing(TWEEN.Easing.Quadratic.Out).start();
                    fadeOut(pages[9].desc, 2e3, 0, function () {
                        weiyeExecute()
                    })
                }
            };
            page.onTouchEnd = function (event) {
                if (curPage != 9)return
            }
        }
            break;
        default:
            break
    }
}
function picFrameAniProgress(progress, textures, mat) {
    var framC = {};
    framC.start = 0;
    framC.end = textures.length - 1;
    framC.currFrame = 0;
    framC.progress = progress;
    framC.currFrame = Math.floor((framC.end - framC.start) * framC.progress);
    mat.map = textures[framC.currFrame]
}
function fadeAniProgress(progress, mesh) {
    mesh.material.opacity = progress
}
function updateChess(progress, page) {
    if (progress > 1 || progress < 0) {
        return
    }
    var pg1 = progress;
    var pmid = .45;
    picFrameAniProgress(pg1, page.chess2d.textures, page.chess2d.material);
    var pg2 = progress / pmid;
    if (pg2 <= 1 && pg2 >= 0) {
        var ap = 1 - pg2;
        fadeAniProgress(ap, page.handLishishi);
        fadeAniProgress(ap, page.handRobot);
        fadeAniProgress(ap, page.tagLishishi)
    }
    var pg3 = (progress - pmid) / .3;
    if (progress > pmid) {
        page.handRobotObj.scale.x = -page.initScale.x;
        page.handRobotObj.position.x = -page.initPosX;
        page.alphaGo.position.x = -page.initAlphaGoPos.x;
        page.handLishishi.visible = false;
        page.tagLishishi.visible = false;
        page.handKejie.visible = true;
        page.tagKejie.visible = true;
        page.isKejie = true
    } else {
        page.handRobotObj.scale.x = page.initScale.x;
        page.handRobotObj.position.x = page.initPosX;
        page.alphaGo.position.x = page.initAlphaGoPos.x;
        page.handLishishi.visible = true;
        page.tagLishishi.visible = true;
        page.handKejie.visible = false;
        page.tagKejie.visible = false;
        page.isKejie = false
    }
    if (pg3 <= 1 && pg3 >= 0) {
        fadeAniProgress(pg3, page.handKejie);
        fadeAniProgress(pg3, page.handRobot);
        fadeAniProgress(pg3, page.tagKejie)
    }
}
function createPlane(img, width, height, x, y, mat) {
    if (typeof img == "string") {
        img = loadTexture(img)
    }
    var mat = mat || new THREE.MeshBasicMaterial({
            color: new THREE.Color(16777215),
            transparent: true,
            opacity: 1,
            map: img
        });
    mat.depthTest = false;
    mat.depthWrite = false;
    var plane = new THREE.Mesh(new THREE.PlaneGeometry(width, height, 1, 1), mat);
    plane.renderOrder = 3;
    plane.visible = true;
    if (x != null && y != null) {
        plane.position.set(x, y, 0)
    }
    return plane
}
function addStones(page, amount, xMin, xMax, yMin, yMax) {
    page.stones = [];
    page.stoneRoot = new THREE.Group;
    page.root.add(page.stoneRoot);
    for (var i = 0; i < amount; ++i) {
        var stone;
        var scale = bgWidth * .18;
        var rand = getRandomNum(0, 4);
        if (rand > 0 && rand <= 1) {
            stone = stone1.clone()
        } else if (rand > 1 && rand <= 2) {
            stone = stone2.clone()
        } else if (rand > 2 && rand <= 3) {
            stone = stone3.clone()
        } else if (rand > 3 && rand <= 4) {
            stone = line.clone();
            scale = bgWidth * .05
        }
        scale = scale * getRandomNum(.5, 1.5);
        stone.setRotationFromEuler((new THREE.Euler).fromArray([getRandomNum(-180, 180), getRandomNum(-180, 180), getRandomNum(-180, 180)]));
        stone.scale.set(scale, scale, scale);
        page.stones[i] = new THREE.Group;
        page.stones[i].position.set(getRandomNum(xMin, xMax), getRandomNum(yMin, yMax), 0);
        page.stones[i].rotateAxis = new THREE.Vector3(getRandomNum(-1, 1), getRandomNum(-1, 1), getRandomNum(-1, 1));
        page.stones[i].rotateAngle = 0;
        if (page.stones[i].rotateAxis.x == 0 && page.stones[i].rotateAxis.y == 0 && page.stones[i].rotateAxis.z == 0) page.stones[i].rotateAxis.x = 1;
        page.stones[i].rotateAxis.normalize();
        page.stones[i].add(stone);
        page.stoneRoot.add(page.stones[i])
    }
}
function shatterize(mesh) {
    console.log("shatterize " + mesh.name);
    mesh.isShattering = 0;
    shatters[shatters.length] = mesh;
    var vertices = mesh.geometry.attributes.position.array;
    var faceCount = vertices.length / 9;
    mesh.faces = [];
    mesh.pivot = new THREE.Vector3(0, 0, 0);
    for (var f = 0; f < faceCount; f++) {
        var v1 = f * 9 + 0;
        var v2 = f * 9 + 3;
        var v3 = f * 9 + 6;
        mesh.faces[f] = {};
        var face = mesh.faces[f];
        face.origin = new THREE.Vector3((vertices[v1] + vertices[v2] + vertices[v3]) / 3, (vertices[v1 + 1] + vertices[v2 + 1] + vertices[v3 + 1]) / 3, (vertices[v1 + 2] + vertices[v2 + 2] + vertices[v3 + 2]) / 3);
        face.center = new THREE.Vector3;
        face.center.copy(face.origin);
        mesh.pivot.add(face.origin);
        face.v1 = new THREE.Vector3(vertices[v1] - face.center.x, vertices[v1 + 1] - face.center.y, vertices[v1 + 2] - face.center.z);
        face.v2 = new THREE.Vector3(vertices[v2] - face.center.x, vertices[v2 + 1] - face.center.y, vertices[v2 + 2] - face.center.z);
        face.v3 = new THREE.Vector3(vertices[v3] - face.center.x, vertices[v3 + 1] - face.center.y, vertices[v3 + 2] - face.center.z)
    }
    mesh.pivot.multiplyScalar(1 / faceCount);
    mesh.onTouchDown = function () {
    }
}
function scatter(mesh, dir, param, finishCallback) {
    mesh.isShattering = 1;
    mesh.shatterStartTime = Date.now();
    mesh.scatterFinishCallback = finishCallback;
    for (var f = 0; f < mesh.faces.length; f++) {
        var face = mesh.faces[f];
        face.vel = new THREE.Vector3;
        face.vel.copy(face.center);
        face.vel.sub(mesh.pivot);
        face.vel.z = face.vel.z;
        face.vel.multiplyScalar(getRandomNum(.05, .2));
        if (dir == 0) {
            face.gravity = new THREE.Vector3(0, -.1 + getRandomNum(-.05, .05), 0)
        } else {
            face.gravity = new THREE.Vector3(0, .05, 0)
        }
        face.gravityFactor = param.gravityFactor || 1;
        face.scaleVel = param.scaleVel || .05;
        face.scale = 1;
        face.fadeVel = param.fadeVel || 0;
        face.maxOpacity = param.maxOpacity || 1;
        face.minOpacity = param.minOpacity || 0;
        face.maxVel = (param.maxVel || .2) + getRandomNum(-.02, .1);
        face.duration = param.duration || 3;
        face.minY = param.minY;
        face.maxY = param.maxY
    }
}
function merge(mesh, dir, param, finishCallback) {
    mesh.isShattering = 2;
    mesh.shatterStartTime = Date.now();
    mesh.visible = true;
    mesh.mergeFinishCallback = finishCallback;
    for (var f = 0; f < mesh.faces.length; f++) {
        var face = mesh.faces[f];
        face.vel = new THREE.Vector3(getRandomNum(-.4, .4), getRandomNum(-0, .4), 0);
        face.vel.normalize();
        face.vel.multiplyScalar(getRandomNum(.05, .1));
        if (dir == 0) {
            if (param.fromOffset == null) {
                param.fromOffset = {};
                param.fromOffset.x = 0;
                param.fromOffset.y = 18
            }
            face.mergeDown = true
        } else {
            if (param.fromOffset == null) {
                param.fromOffset = {};
                param.fromOffset.x = 0;
                param.fromOffset.y = -13
            }
            face.mergeDown = false
        }
        face.center.x = mesh.pivot.x + param.fromOffset.x + getRandomNum(-7, 7);
        face.center.y = mesh.pivot.y + param.fromOffset.y + getRandomNum(-3, 3);
        face.center.z = face.origin.z + getRandomNum(-4, 4);
        face.scaleVel = param.scaleVel || .005;
        face.scale = .02;
        face.fadeVel = param.fadeVel || .005;
        face.maxOpacity = param.maxOpacity || 1;
        face.minOpacity = param.minOpacity || 0;
        face.maxVel = (param.maxVel || .2) + getRandomNum(-.02, .05);
        face.duration = param.duration || 3;
        mesh.material.opacity = 0
    }
}
function shattering(mesh) {
    if (!mesh.isShattering)return;
    var dt = (Date.now() - mesh.shatterStartTime) * .001;
    var vertices = mesh.geometry.attributes.position.array;
    if (mesh.isShattering == 1) {
        for (var f = 0; f < mesh.faces.length; f++) {
            var v1 = f * 9 + 0;
            var v2 = f * 9 + 3;
            var v3 = f * 9 + 6;
            var face = mesh.faces[f];
            face.center.x = face.center.x + face.vel.x * dt;
            face.center.y = face.center.y + face.vel.y * dt;
            face.center.z = face.center.z + face.vel.z * dt;
            var t = 1.5;
            face.vel.x = face.vel.x + face.gravity.x * dt * face.gravityFactor;
            face.vel.y = face.vel.y + face.gravity.y * dt * face.gravityFactor;
            face.vel.z = face.vel.z + face.gravity.z * dt * face.gravityFactor;
            if (face.vel.length() > face.maxVel) {
                face.vel.setLength(face.maxVel)
            }
            face.scale = face.scale - face.scaleVel * dt;
            if (face.minY != null) {
                if (face.center.y < face.minY) {
                    face.scaleVel = .03
                } else {
                    if (face.scale < .5) face.scale = .5
                }
            } else if (face.maxY != null) {
                if (face.center.y > face.maxY) {
                    face.scaleVel = .03
                } else {
                    if (face.scale < .5) face.scale = .5
                }
            }
            if (face.scale < 0) face.scale = 0;
            var s = face.scale;
            vertices[v1 + 0] = face.center.x + face.v1.x * s;
            vertices[v1 + 1] = face.center.y + face.v1.y * s;
            vertices[v1 + 2] = face.center.z + face.v1.z * s;
            vertices[v2 + 0] = face.center.x + face.v2.x * s;
            vertices[v2 + 1] = face.center.y + face.v2.y * s;
            vertices[v2 + 2] = face.center.z + face.v2.z * s;
            vertices[v3 + 0] = face.center.x + face.v3.x * s;
            vertices[v3 + 1] = face.center.y + face.v3.y * s;
            vertices[v3 + 2] = face.center.z + face.v3.z * s
        }
        mesh.geometry.attributes.position.needsUpdate = true;
        mesh.material.opacity = mesh.material.opacity + face.fadeVel * dt;
        if (mesh.material.opacity > face.maxOpacity) {
            mesh.material.opacity = face.maxOpacity
        } else if (mesh.material.opacity < face.minOpacity) {
            mesh.material.opacity = face.minOpacity
        }
        if (dt > face.duration) {
            mesh.isShattering = 0;
            if (mesh.scatterFinishCallback != null) mesh.scatterFinishCallback()
        }
    } else if (mesh.isShattering == 2) {
        for (var f = 0; f < mesh.faces.length; f++) {
            var face = mesh.faces[f];
            var v1 = f * 9 + 0;
            var v2 = f * 9 + 3;
            var v3 = f * 9 + 6;
            face.center.x = face.center.x + face.vel.x * dt;
            face.center.y = face.center.y + face.vel.y * dt;
            face.center.z = face.center.z + face.vel.z * dt;
            if (face.mergeDown && face.center.y <= face.origin.y) {
                face.center.copy(face.origin)
            } else if (!face.mergeDown && face.center.y >= face.origin.y) {
                face.center.copy(face.origin)
            }
            var tmp = new THREE.Vector3;
            tmp.copy(face.origin);
            tmp.sub(face.center);
            var t = .001;
            face.vel.x = face.vel.x + tmp.x * dt * t;
            face.vel.y = face.vel.y + tmp.y * dt * t;
            face.vel.z = face.vel.z + tmp.z * dt * t;
            if (face.vel.length() > face.maxVel) {
                face.vel.setLength(face.maxVel)
            }
            face.scale = face.scale + face.scaleVel * dt;
            if (face.scale > 1) face.scale = 1;
            var s = face.scale;
            if (dt > face.duration) {
                face.center.copy(face.origin);
                face.scale = 1;
                s = face.scale
            }
            vertices[v1 + 0] = face.center.x + face.v1.x * s;
            vertices[v1 + 1] = face.center.y + face.v1.y * s;
            vertices[v1 + 2] = face.center.z + face.v1.z * s;
            vertices[v2 + 0] = face.center.x + face.v2.x * s;
            vertices[v2 + 1] = face.center.y + face.v2.y * s;
            vertices[v2 + 2] = face.center.z + face.v2.z * s;
            vertices[v3 + 0] = face.center.x + face.v3.x * s;
            vertices[v3 + 1] = face.center.y + face.v3.y * s;
            vertices[v3 + 2] = face.center.z + face.v3.z * s
        }
        mesh.geometry.attributes.position.needsUpdate = true;
        mesh.material.opacity = mesh.material.opacity + face.fadeVel * dt;
        if (mesh.material.opacity > face.maxOpacity) {
            mesh.material.opacity = face.maxOpacity
        } else if (mesh.material.opacity < face.minOpacity) {
            mesh.material.opacity = face.minOpacity
        }
        if (dt > face.duration) {
            mesh.isShattering = 0;
            if (mesh.mergeFinishCallback != null) mesh.mergeFinishCallback()
        }
    }
}
function updateShatters() {
    for (var s = 0; s < shatters.length; s++) {
        var mesh = shatters[s];
        shattering(mesh)
    }
}
function switchToPage(pageIdx) {
    console.log("switchToPage " + pageIdx);
    if (pageIdx == curPage)return;
    leavePage(curPage, pageIdx);
    uiSwitchPage(curPage, pageIdx);
    var prevPage = curPage;
    curPage = pageIdx;
    enterPage(curPage, prevPage)
}
function leavePage(pageIdx, toPageIdx) {
    console.log("leave page " + pageIdx);
    var tween = new TWEEN.Tween(pages[pageIdx].bg.material).to({opacity: 0}, 1e3).easing(TWEEN.Easing.Quadratic.Out).start();
    var page = pages[pageIdx];
    var dir = 0;
    if (toPageIdx > pageIdx) {
        dir = 0
    } else {
        dir = 1
    }
    var isDown = dir == 0;
    var descFadeOutTime = 1e3;
    var descFadeOutDelay = 500;
    if (page.year != null) page.year.shine(isDown);
    switch (pageIdx) {
        case 0: {
            scatter(meshes["shouye_shenti"], dir, {
                maxVel: .03,
                duration: 2.5,
                fadeVel: -.005,
                minY: -10,
                gravityFactor: .1
            }, function () {
                console.log("jin shouye_shenti")
            });
            scatter(meshes["shouye_toubu"], dir, {
                maxVel: .06,
                duration: 3,
                fadeVel: -.005,
                minY: -10,
                gravityFactor: .1
            }, function () {
                console.log("jin shouye_toubu")
            });
            fadeOut(page.robotbg, 2e3, 0)
        }
            break;
        case 1: {
            var posOffset = isDown ? {x: 0, y: -30, z: 0} : {x: 0, y: 80, z: 0};
            scatter(meshes["yemian_2"], dir, {
                maxVel: .2,
                duration: 3,
                fadeVel: -.005,
                minY: isDown ? -13 : null,
                maxY: isDown ? null : 14
            }, function () {
            });
            fadeOut(page.desc, descFadeOutTime, descFadeOutDelay);
            fadeOut(page.desc_en, descFadeOutTime, descFadeOutDelay)
        }
            break;
        case 2: {
            scatter(meshes["yemian2_shitou"], dir, {
                maxVel: .2,
                duration: 3,
                fadeVel: -.005,
                minY: isDown ? -15 : null,
                maxY: isDown ? null : 17
            }, function () {
            });
            fadeOut(page.desc, descFadeOutTime, descFadeOutDelay);
            fadeOut(page.desc_en, descFadeOutTime, descFadeOutDelay);
            var tween = new TWEEN.Tween(page.scanMat.uniforms.timey).to({value: 0}, 4e3).easing(TWEEN.Easing.Quadratic.Out).start()
        }
            break;
        case 3: {
            page.jixie2dAni.stop();
            fadeOut(page.jixie2d, 500, 0);
            meshes["yemian3_jixiebi"].visible = true;
            meshes["yemian3_jixiebi"].material.opacity = 1;
            scatter(meshes["yemian3_jixiebi"], dir, {
                maxVel: .2,
                duration: 3,
                fadeVel: -.005,
                minY: isDown ? -10 : null,
                maxY: isDown ? null : 17
            });
            fadeOut(page.desc, descFadeOutTime, descFadeOutDelay);
            fadeOut(page.desc_en, descFadeOutTime, descFadeOutDelay)
        }
            break;
        case 4: {
            var carDuration = 3e3;
            page.wheelAni.reset();
            page.wheelAni.start();
            if (page.translateAni != null) page.translateAni.stop();
            page.translateAni = new TWEEN.Tween(page.car2d.position).to({
                x: page.car2d.initPosX,
                y: page.car2d.initPosY
            }, carDuration).easing(TWEEN.Easing.Quadratic.Out).onComplete(function () {
                pages[4].wheelAni.stop()
            }).start();
            if (page.scaleAni != null) page.scaleAni.stop();
            page.scaleAni = new TWEEN.Tween(page.car2d.scale).to({
                x: page.car2d.initScale,
                y: page.car2d.initScale,
                z: page.car2d.initScale
            }, carDuration).easing(TWEEN.Easing.Quadratic.Out).start();
            fadeOut(page.car2d, 500, 0);
            scatter(meshes["ground"], dir, {
                maxVel: .2,
                duration: 3,
                fadeVel: -.005,
                minY: isDown ? -15 : null,
                maxY: isDown ? null : 17
            });
            fadeOut(page.desc, descFadeOutTime, descFadeOutDelay);
            fadeOut(page.desc_en, descFadeOutTime, descFadeOutDelay)
        }
            break;
        case 5: {
            page.scatterDogMesh(dir, null, .2);
            fadeOut(page.desc, descFadeOutTime, descFadeOutDelay);
            fadeOut(page.desc_en, descFadeOutTime, descFadeOutDelay)
        }
            break;
        case 6: {
            scatter(meshes["yemian6_danao"], dir, {
                maxVel: .2,
                duration: 3,
                fadeVel: -.005,
                minY: isDown ? -15 : null,
                maxY: isDown ? null : 17
            });
            fadeOut(page.desc, descFadeOutTime, descFadeOutDelay);
            fadeOut(page.desc_en, descFadeOutTime, descFadeOutDelay);
            fadeOut(page.brainBg, 500, 0);
            for (var i = 0; i < pages[6].dots.length; ++i) {
                var dot = pages[6].dots[i];
                fadeOut(dot, 400, 0);
                var light = pages[6].lights[i];
                light.tween.stop();
                fadeOut(light, 400, 0);
                var tag = pages[6].tags[i];
                tag.tween.stop();
                fadeOut(tag, 400, 0);
                var tag_en = pages[6].tags_en[i];
                tag_en.tween.stop();
                fadeOut(tag_en, 400, 0)
            }
        }
            break;
        case 7: {
            scatter(meshes["yemian7_rentou polySurface20 pPlane7"], dir, {
                maxVel: .2,
                duration: 3,
                fadeVel: -.005,
                minY: isDown ? -15 : null,
                maxY: isDown ? null : 17
            });
            page.scan.tween.stop();
            fadeOut(page.shadow, descFadeOutTime, descFadeOutTime);
            fadeOut(page.scan, descFadeOutTime, descFadeOutTime);
            fadeOut(page.board, descFadeOutTime, descFadeOutDelay);
            fadeOut(page.desc, descFadeOutTime, descFadeOutDelay);
            fadeOut(page.desc_en, descFadeOutTime, descFadeOutDelay)
        }
            break;
        case 8: {
        }
            break;
        case 9: {
            fadeOut(page.desc, descFadeOutTime, descFadeOutDelay);
            fadeOut(page.desc_en, descFadeOutTime, descFadeOutDelay)
        }
            break;
        default:
            break
    }
}
function enterPage(pageIdx, fromPageIdx) {
    console.log("enter page " + pageIdx);
    var tween = new TWEEN.Tween(pages[pageIdx].bg.material).to({opacity: 1}, 1e3).easing(TWEEN.Easing.Quadratic.Out).start();
    var page = pages[pageIdx];
    var dir = 0;
    if (pageIdx > fromPageIdx) {
        dir = 0
    } else {
        dir = 1
    }
    var isDown = dir == 0;
    var descFadeInTime = 1e3;
    var descFadeInDelay = 3e3;
    for (var i = 0; i < pages.length; ++i) {
        var p = pages[i];
        if (p.stoneRoot != null) {
            if (i <= pageIdx + 1 && i >= pageIdx - 1) {
                p.stoneRoot.visible = true
            } else {
                p.stoneRoot.visible = false
            }
        }
    }
    if (page.year != null) page.year.shine(isDown);
    switch (pageIdx) {
        case 0: {
            var posOffset = isDown ? {x: 0, y: 18} : {x: 0, y: -13};
            merge(meshes["shouye_shenti"], dir, {fromOffset: posOffset, maxVel: .04, duration: 8});
            merge(meshes["shouye_toubu"], dir, {fromOffset: posOffset, maxVel: .04, duration: 8});
            fadeIn(page.robotbg, 5e3, 0)
        }
            break;
        case 1: {
            var posOffset = isDown ? {x: 0, y: 20} : {x: 0, y: -18};
            setTimeout(function () {
                merge(meshes["yemian_2"], dir, {fromOffset: posOffset, maxVel: .04, duration: 8})
            }, 500);
            fadeIn(isEnglish ? page.desc_en : page.desc, descFadeInTime, 5e3)
        }
            break;
        case 2: {
            var posOffset = isDown ? {x: 0, y: 18} : {x: 0, y: -16};
            merge(meshes["yemian2_shitou"], dir, {fromOffset: posOffset, maxVel: .1, duration: 3}, function () {
                fadeIn(isEnglish ? page.desc_en : page.desc, descFadeInTime, 0);
                var tween = new TWEEN.Tween(page.scanMat.uniforms.timey).to({value: 1.3}, 4e3).easing(TWEEN.Easing.Quadratic.Out).onUpdate(function () {
                }).start()
            })
        }
            break;
        case 3: {
            fadeIn(page.jixie2d, 500, 2e3);
            var posOffset = isDown ? {x: 0, y: 14} : {x: 0, y: -13};
            merge(meshes["yemian3_jixiebi"], dir, {fromOffset: posOffset, maxVel: .06, duration: 4}, function () {
                fadeOut(meshes["yemian3_jixiebi"], 500, 0, function () {
                    pages[3].jixie2dAni.reset();
                    pages[3].jixie2dAni.start()
                })
            });
            fadeIn(isEnglish ? page.desc_en : page.desc, descFadeInTime, descFadeInDelay)
        }
            break;
        case 4: {
            fadeIn(page.car2d, descFadeInTime, descFadeInDelay);
            page.wheelAni.reset();
            page.wheelAni.start();
            if (page.translateAni != null) page.translateAni.stop();
            page.translateAni = new TWEEN.Tween(page.car2d.position).to({
                x: .167 * bgWidth,
                y: -.15 * bgHeight
            }, 4e3).easing(TWEEN.Easing.Quadratic.Out).onComplete(function () {
                pages[4].wheelAni.stop()
            }).delay(2e3).start();
            if (page.scaleAni != null) page.scaleAni.stop();
            page.scaleAni = new TWEEN.Tween(page.car2d.scale).to({
                x: 1,
                y: 1,
                z: 1
            }, 4e3).easing(TWEEN.Easing.Quadratic.Out).delay(2e3).start();
            var posOffset = isDown ? {x: 0, y: 20} : {x: 0, y: -10};
            merge(meshes["ground"], dir, {fromOffset: posOffset, maxVel: .04, duration: 8});
            fadeIn(isEnglish ? page.desc_en : page.desc, descFadeInTime, descFadeInDelay);
            meshes["ground"].scale.set(1.4, 1, 1);
            meshes["ground"].position.x = -.004 * bgWidth;
            page.groundTranslateAni = new TWEEN.Tween(meshes["ground"].position).to({x: 0}, 3e3).easing(TWEEN.Easing.Quadratic.Out).delay(2500).start()
        }
            break;
        case 5: {
            page.setCurDogAngle(page.initDogAngle);
            page.mergeDogMesh(dir, posOffset);
            page.fadeEventTrigger = false;
            fadeIn(isEnglish ? page.desc_en : page.desc, descFadeInTime, descFadeInDelay);
            fadeIn(page.tipBack, descFadeInTime, descFadeInDelay, function () {
                fadeTo(page.tipBack, 0, 800, 0, null, 4, true)
            });
            fadeIn(page.tipFront, descFadeInTime, descFadeInDelay, function () {
                fadeTo(page.tipFront, 0, 800, 0, null, 4, true)
            });
            fadeIn(page.tipHead, descFadeInTime, descFadeInDelay, function () {
                fadeTo(page.tipHead, 0, 800, 0, null, 4, true)
            })
        }
            break;
        case 6: {
            var posOffset = isDown ? {x: 0, y: 14} : {x: 0, y: -13.5};
            merge(meshes["yemian6_danao"], dir, {fromOffset: posOffset, maxVel: .04, duration: 8});
            fadeIn(isEnglish ? page.desc_en : page.desc, descFadeInTime, 5e3);
            fadeIn(page.brainBg, 1e3, 5e3);
            for (var i = 0; i < pages[6].dots.length; ++i) {
                var dot = pages[6].dots[i];
                fadeIn(dot, 400, 5e3);
                var light = pages[6].lights[i];
                light.visible = true;
                light.tween = new TWEEN.Tween(light.material).to({opacity: 1}, 1e3 + getRandomNum(-100, 500)).easing(TWEEN.Easing.Quadratic.Out).repeat(Infinity).yoyo(Infinity).start();
                var tag = pages[6].tags[i];
                tag.visible = true;
                tag.tween = new TWEEN.Tween(tag.material).to({opacity: 1}, 500).easing(TWEEN.Easing.Quadratic.Out).delay(6e3 + i * 200).start();
                var tag_en = pages[6].tags_en[i];
                tag_en.visible = true;
                tag_en.tween = new TWEEN.Tween(tag_en.material).to({opacity: 1}, 500).easing(TWEEN.Easing.Quadratic.Out).delay(6e3 + i * 200).start()
            }
        }
            break;
        case 7: {
            fadeIn(page.scan, descFadeInTime, 1e3);
            page.scan.visible = true;
            page.scan.position.x = -.3 * bgWidth;
            page.scan.tween = new TWEEN.Tween(page.scan.position).to({x: .3 * bgWidth}, 2500).repeat(Infinity).start();
            meshes["yemian7_rentou polySurface20 pPlane7"].visible = true;
            var posOffset = isDown ? {x: 0, y: 14} : {x: 0, y: -15.5};
            merge(meshes["yemian7_rentou polySurface20 pPlane7"], dir, {
                fromOffset: posOffset,
                maxVel: .05,
                duration: 5,
                maxOpacity: .4
            }, function () {
                fadeIn(meshes["yemian7_rentou polySurface20 pPlane7"], 1e3, 0)
            });
            fadeIn(page.shadow, descFadeInTime, 5e3);
            fadeIn(page.board, descFadeInTime, 1e3);
            fadeIn(isEnglish ? page.desc_en : page.desc, descFadeInTime, descFadeInDelay)
        }
            break;
        case 8: {
            pages[8].interpolateChess(pages[8].curChessProgress);
            if (!page.isKejie) {
                fadeIn(page.tagLishishi, descFadeInTime, 2e3);
                fadeIn(isEnglish ? page.desc_en : page.desc, descFadeInTime, descFadeInDelay);
                fadeIn(page.alphaGo, descFadeInTime, 2e3);
                merge(meshes["yemian8_renshou"], dir, {fromOffset: posOffset, maxVel: .06, duration: 7, maxOpacity: 1})
            } else {
                fadeIn(page.tagKejie, descFadeInTime, 2e3);
                fadeIn(isEnglish ? page.desc_en : page.desc, descFadeInTime, descFadeInDelay);
                fadeIn(page.alphaGo, descFadeInTime, 2e3)
            }
            var posOffset = isDown ? {x: 0, y: 20} : {x: 0, y: -20};
            merge(meshes["yemian9_jixieshou"], dir, {fromOffset: posOffset, maxVel: .06, duration: 7, maxOpacity: 1});
            fadeIn(page.chess2d, 500, 1e3);
            page.chess2dStartAni.reset();
            page.chess2dStartAni.start()
        }
            break;
        case 9: {
            fadeIn(isEnglish ? page.desc_en : page.desc, descFadeInTime, descFadeInDelay)
        }
            break;
        default:
            break
    }
}
function pickTest(touchPos) {
    raycaster.setFromCamera(touchPos, camera);
    var intersects = raycaster.intersectObjects(sceneRoot.children, true);
    if (intersects.length > 0) {
        for (var i = 0; i < intersects.length; i++) {
            var intersect = intersects[i];
            console.log(intersect.object.name);
            if (intersect.object.onTouchDown != null) {
                intersect.object.onTouchDown()
            }
        }
    }
}
function onWindowResize() {
    console.log("onWindowResize : " + window.innerWidth + " " + window.innerHeight);
    windowHalfX = window.innerWidth / 2;
    windowHalfY = window.innerHeight / 2;
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    camera2.aspect = window.innerWidth / window.innerHeight;
    camera2.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight)
}
var sceneRootTouchStartPos = new THREE.Vector2;
var touchStartPos = new THREE.Vector2;
var touchPos = new THREE.Vector2;
var touchEndPos = new THREE.Vector2;
var lastTouchPos = new THREE.Vector2;
var isTouchStart = false;
function onTouchStart(event) {
    event.preventDefault();
    if (!isSceneStarted)return;
    if (isTraveling)return;
    for (var i = 0; i < pages.length; ++i) {
        var page = pages[i];
        if (page.onTouchStart != null) {
            page.onTouchStart(event)
        }
    }
    if (!enableMovePage)return;
    touchStartPos.x = event.touches[0].clientX / window.innerWidth * 2 - 1;
    touchStartPos.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1;
    lastTouchPos.copy(touchStartPos);
    isTouchStart = true;
    isAutoRolling = false;
    sceneRootTouchStartPos.x = sceneRoot.position.x;
    sceneRootTouchStartPos.y = sceneRoot.position.y;
    pickTest(touchStartPos);
    onTouchMove(event)
}
function onTouchMove(event) {
    event.preventDefault();
    if (!isSceneStarted)return;
    if (isTraveling)return;
    for (var i = 0; i < pages.length; ++i) {
        var page = pages[i];
        if (page.onTouchMove != null) {
            page.onTouchMove(event)
        }
    }
    if (!enableMovePage)return;
    if (isTouchStart) {
        touchPos.x = event.touches[0].clientX / window.innerWidth * 2 - 1;
        touchPos.y = -(event.touches[0].clientY / window.innerHeight) * 2 + 1;
        touchVel = touchPos.y - lastTouchPos.y;
        lastTouchPos.copy(touchPos);
        var diffY = touchPos.y - touchStartPos.y;
        setSceneRootY(sceneRootTouchStartPos.y + diffY * window.innerHeight * .5);
        checkPageProgress()
    }
}
function onTouchEnd(event) {
    event.preventDefault();
    if (isTouchStart) {
        isTouchStart = false
    }
    if (!isSceneStarted)return;
    if (isTraveling)return;
    for (var i = 0; i < pages.length; ++i) {
        var page = pages[i];
        if (page.onTouchEnd != null) {
            page.onTouchEnd(event)
        }
    }
    if (!enableMovePage)return;
    touchEndPos.x = event.changedTouches[0].clientX / window.innerWidth * 2 - 1;
    touchEndPos.y = -(event.changedTouches[0].clientY / window.innerHeight) * 2 + 1;
    if (Math.abs(touchVel) > .01) {
        isAutoRolling = true;
        rollingVelocity = touchVel
    }
}
function setSceneRootY(y) {
    sceneRoot.position.y = y;
    if (sceneRoot.position.y < 0) {
        sceneRoot.position.y = 0;
        return false
    } else {
        if (sceneRoot.position.y > maxSceneRootY) {
            sceneRoot.position.y = maxSceneRootY;
            return false
        }
    }
    return true
}
var lastSceneRootY = 0;
function checkPageProgress() {
    if (!isTraveling) {
        var currentPage = pages[curPage];
        var Y = sceneRoot.position.y;
        if (Y > lastSceneRootY) {
            if (Y > -currentPage.posY + defaultYearHeight) {
                switchToPage(curPage + 1);
                travelTo(-pages[curPage].posY)
            }
        } else {
            if (Y < -currentPage.posY - defaultYearHeight) {
                switchToPage(curPage - 1);
                travelTo(-pages[curPage].posY)
            }
        }
        lastSceneRootY = Y
    }
}
function travelTo(p) {
    console.log("travel to " + p);
    isTraveling = true;
    travelPos.y = p;
    isAutoRolling = false;
    isTouchStart = false
}
function fadeTo(mesh, opacity, duration, delay, finishCallback, repeatCount, yoyo) {
    console.log("fadeTo");
    duration = duration || 500;
    repeatCount = repeatCount || 0;
    yoyo = yoyo || false;
    var tween = new TWEEN.Tween(mesh.material).to({opacity: opacity}, duration).delay(delay).onComplete(finishCallback).repeat(repeatCount).yoyo(yoyo).start();
    return tween
}
function fadeIn(mesh, duration, delay, finishCallback) {
    delay = delay || 0;
    mesh.visible = true;
    return fadeTo(mesh, 1, duration, delay, function () {
        if (finishCallback != null) finishCallback()
    })
}
function fadeOut(mesh, duration, delay, finishCallback) {
    delay = delay || 0;
    mesh.visible = true;
    return fadeTo(mesh, 0, duration, delay, function () {
        mesh.visible = false;
        if (finishCallback != null) finishCallback()
    })
}
function pictureFrameAnimation(duration, delay, picArr, changeFrameCallback, repeat, yoyo) {
    if (repeat == null) repeat = true;
    if (yoyo == null) yoyo = true;
    var textures = [];
    for (var i = 0; i < picArr.length; i++) {
        if (textures[i] instanceof THREE.Texture) {
            textures[i] = picArr[i]
        } else if (typeof picArr[i] == "string") {
            textures[i] = loadTexture(picArr[i])
        }
    }
    var framC = {};
    framC.start = 0;
    framC.end = picArr.length - 1;
    framC.currFrame = 0;
    framC.lastFrame = -1;
    framC.progress = 0;
    var tween = new TWEEN.Tween(framC).to({progress: 1}, duration).onUpdate(function () {
        framC.currFrame = Math.floor((framC.end - framC.start) * framC.progress);
        if (framC.currFrame != framC.lastFrame) {
            if (changeFrameCallback != null) {
                changeFrameCallback(textures[framC.currFrame])
            }
        }
        framC.lastFrame = framC.currFrame
    }).delay(delay);
    if (repeat) {
        tween.repeat(Infinity)
    }
    if (yoyo) {
        tween.yoyo(Infinity)
    }
    tween.framC = framC;
    tween.reset = function () {
        tween.framC.progress = 0;
        changeFrameCallback(textures[0])
    };
    return tween
}
var mouse = new THREE.Vector2;
function onDocumentMouseMove(event) {
    mouse.x = event.clientX / window.innerWidth * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1
}
function updateRolling(dt) {
    if (isTraveling)return;
    if (isAutoRolling) {
        var isOk = setSceneRootY(sceneRoot.position.y + rollingVelocity * dt * 1e4);
        checkPageProgress();
        var sign = rollingVelocity > 0 ? 1 : -1;
        var newRollingVelocity = rollingVelocity - sign * dt * .05;
        if (newRollingVelocity * rollingVelocity <= 0 || Math.abs(newRollingVelocity) < 1e-4 || !isOk) {
            isAutoRolling = false;
            rollingVelocity = 0
        } else {
            rollingVelocity = newRollingVelocity
        }
    }
}
function updateTraveling(dt) {
    if (isTraveling) {
        isAutoRolling = false;
        if (travelPos.y > sceneRoot.position.y) {
            var b = setSceneRootY(sceneRoot.position.y + bgHeight * dt * .3);
            if (!b || sceneRoot.position.y >= travelPos.y) {
                isTraveling = false
            }
        } else {
            var b = setSceneRootY(sceneRoot.position.y - bgHeight * dt * .3);
            if (!b || sceneRoot.position.y <= travelPos.y) {
                isTraveling = false
            }
        }
    }
}
function updatePages(dt) {
    for (var i = 0; i < pages.length; ++i) {
        var page = pages[i];
        if (page.update != null) {
            page.update(dt)
        }
    }
}
function animate(time) {
    requestAnimationFrame(animate);
    if (mixers.length > 0) {
        for (var i = 0; i < mixers.length; i++) {
            mixers[i].update(time * 1e-4)
        }
    }
    render();
    TWEEN.update(time)
}
var lastTime = Date.now();
function render() {
    var now = Date.now();
    var dt = (now - lastTime) * .001;
    lastTime = now;
    updatePages(dt);
    updateRolling(dt);
    updateShatters();
    updateStones(dt);
    updateTraveling(dt);
    camera.lookAt(scene.position);
    camera2.lookAt(scene.position);
    renderer.render(scene, camera)
}
var getRandomNum = function (min, max) {
    return min + Math.random() * (max - min)
};